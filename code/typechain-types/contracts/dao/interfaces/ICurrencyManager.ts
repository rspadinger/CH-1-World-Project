/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface ICurrencyManagerInterface extends utils.Interface {
  functions: {
    "addCurrency(address)": FunctionFragment;
    "isCurrencyWhitelisted(address)": FunctionFragment;
    "removeCurrency(address)": FunctionFragment;
    "viewCountWhitelistedCurrencies()": FunctionFragment;
    "viewWhitelistedCurrencies(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCurrency"
      | "isCurrencyWhitelisted"
      | "removeCurrency"
      | "viewCountWhitelistedCurrencies"
      | "viewWhitelistedCurrencies"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isCurrencyWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeCurrency",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCountWhitelistedCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "viewWhitelistedCurrencies",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCurrencyWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeCurrency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewCountWhitelistedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "viewWhitelistedCurrencies",
    data: BytesLike
  ): Result;

  events: {};
}

export interface ICurrencyManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICurrencyManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isCurrencyWhitelisted(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    viewCountWhitelistedCurrencies(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    viewWhitelistedCurrencies(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;
  };

  addCurrency(
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isCurrencyWhitelisted(
    currency: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeCurrency(
    currency: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  viewCountWhitelistedCurrencies(overrides?: CallOverrides): Promise<BigNumber>;

  viewWhitelistedCurrencies(
    cursor: PromiseOrValue<BigNumberish>,
    size: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber]>;

  callStatic: {
    addCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isCurrencyWhitelisted(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeCurrency(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    viewCountWhitelistedCurrencies(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewWhitelistedCurrencies(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber]>;
  };

  filters: {};

  estimateGas: {
    addCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isCurrencyWhitelisted(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    viewCountWhitelistedCurrencies(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    viewWhitelistedCurrencies(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isCurrencyWhitelisted(
      currency: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeCurrency(
      currency: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    viewCountWhitelistedCurrencies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    viewWhitelistedCurrencies(
      cursor: PromiseOrValue<BigNumberish>,
      size: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
