/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TierConfigStruct = {
  amount: PromiseOrValue<BigNumberish>;
  price: PromiseOrValue<BigNumberish>;
  power: PromiseOrValue<BigNumberish>;
  minted: PromiseOrValue<BigNumberish>;
};

export type TierConfigStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  amount: BigNumber;
  price: BigNumber;
  power: BigNumber;
  minted: BigNumber;
};

export type DAOConfigStruct = {
  ensname: PromiseOrValue<string>;
  daoType: PromiseOrValue<BigNumberish>;
  tiers: TierConfigStruct[];
  currency: PromiseOrValue<string>;
  maxMembers: PromiseOrValue<BigNumberish>;
  noOfTiers: PromiseOrValue<BigNumberish>;
};

export type DAOConfigStructOutput = [
  string,
  number,
  TierConfigStructOutput[],
  string,
  BigNumber,
  BigNumber
] & {
  ensname: string;
  daoType: number;
  tiers: TierConfigStructOutput[];
  currency: string;
  maxMembers: BigNumber;
  noOfTiers: BigNumber;
};

export type DAOInputConfigStruct = {
  ensname: PromiseOrValue<string>;
  daoType: PromiseOrValue<BigNumberish>;
  currency: PromiseOrValue<string>;
  maxMembers: PromiseOrValue<BigNumberish>;
  noOfTiers: PromiseOrValue<BigNumberish>;
};

export type DAOInputConfigStructOutput = [
  string,
  number,
  string,
  BigNumber,
  BigNumber
] & {
  ensname: string;
  daoType: number;
  currency: string;
  maxMembers: BigNumber;
  noOfTiers: BigNumber;
};

export declare namespace NativeMetaTransaction {
  export type MetaTransactionStruct = {
    nonce: PromiseOrValue<BigNumberish>;
    from: PromiseOrValue<string>;
    functionSignature: PromiseOrValue<BytesLike>;
  };

  export type MetaTransactionStructOutput = [BigNumber, string, string] & {
    nonce: BigNumber;
    from: string;
    functionSignature: string;
  };
}

export interface MembershipFactoryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "EXTERNAL_CALLER()": FunctionFragment;
    "baseURI()": FunctionFragment;
    "callExternalContract(address,bytes)": FunctionFragment;
    "createNewDAOMembership((string,uint8,address,uint256,uint256),(uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "currencyManager()": FunctionFragment;
    "daos(address)": FunctionFragment;
    "executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": FunctionFragment;
    "getChainId()": FunctionFragment;
    "getDomainSeperator()": FunctionFragment;
    "getENSAddress(string)": FunctionFragment;
    "getNonce(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hashMetaTransaction((uint256,address,bytes))": FunctionFragment;
    "joinDAO(address,uint256)": FunctionFragment;
    "membershipImplementation()": FunctionFragment;
    "owpWallet()": FunctionFragment;
    "proxyAdmin()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setCurrencyManager(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tiers(address)": FunctionFragment;
    "updateDAOMembership(string,(uint256,uint256,uint256,uint256)[])": FunctionFragment;
    "updateMembershipImplementation(address)": FunctionFragment;
    "upgradeTier(address,uint256)": FunctionFragment;
    "userCreatedDAOs(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "EXTERNAL_CALLER"
      | "baseURI"
      | "callExternalContract"
      | "createNewDAOMembership"
      | "currencyManager"
      | "daos"
      | "executeMetaTransaction"
      | "getChainId"
      | "getDomainSeperator"
      | "getENSAddress"
      | "getNonce"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "hashMetaTransaction"
      | "joinDAO"
      | "membershipImplementation"
      | "owpWallet"
      | "proxyAdmin"
      | "renounceRole"
      | "revokeRole"
      | "setBaseURI"
      | "setCurrencyManager"
      | "supportsInterface"
      | "tiers"
      | "updateDAOMembership"
      | "updateMembershipImplementation"
      | "upgradeTier"
      | "userCreatedDAOs"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EXTERNAL_CALLER",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callExternalContract",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createNewDAOMembership",
    values: [DAOInputConfigStruct, TierConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "currencyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMetaTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getENSAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashMetaTransaction",
    values: [NativeMetaTransaction.MetaTransactionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "joinDAO",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "membershipImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owpWallet", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setCurrencyManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tiers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDAOMembership",
    values: [PromiseOrValue<string>, TierConfigStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMembershipImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTier",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userCreatedDAOs",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EXTERNAL_CALLER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callExternalContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createNewDAOMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getENSAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashMetaTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinDAO", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "membershipImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owpWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proxyAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurrencyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDAOMembership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMembershipImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCreatedDAOs",
    data: BytesLike
  ): Result;

  events: {
    "MembershipDAONFTCreated(string,address,tuple)": EventFragment;
    "MetaTransactionExecuted(address,address,bytes,bytes32)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "UserJoinedDAO(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MembershipDAONFTCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MetaTransactionExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserJoinedDAO"): EventFragment;
}

export interface MembershipDAONFTCreatedEventObject {
  ensName: string;
  nftAddress: string;
  daoData: DAOConfigStructOutput;
}
export type MembershipDAONFTCreatedEvent = TypedEvent<
  [string, string, DAOConfigStructOutput],
  MembershipDAONFTCreatedEventObject
>;

export type MembershipDAONFTCreatedEventFilter =
  TypedEventFilter<MembershipDAONFTCreatedEvent>;

export interface MetaTransactionExecutedEventObject {
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
  metaTXHash: string;
}
export type MetaTransactionExecutedEvent = TypedEvent<
  [string, string, string, string],
  MetaTransactionExecutedEventObject
>;

export type MetaTransactionExecutedEventFilter =
  TypedEventFilter<MetaTransactionExecutedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UserJoinedDAOEventObject {
  user: string;
  membershipNftAddress: string;
  tierIndex: BigNumber;
}
export type UserJoinedDAOEvent = TypedEvent<
  [string, string, BigNumber],
  UserJoinedDAOEventObject
>;

export type UserJoinedDAOEventFilter = TypedEventFilter<UserJoinedDAOEvent>;

export interface MembershipFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MembershipFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    EXTERNAL_CALLER(overrides?: CallOverrides): Promise<[string]>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    callExternalContract(
      contractAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createNewDAOMembership(
      daoConfig: DAOInputConfigStruct,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currencyManager(overrides?: CallOverrides): Promise<[string]>;

    daos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        ensname: string;
        daoType: number;
        currency: string;
        maxMembers: BigNumber;
        noOfTiers: BigNumber;
      }
    >;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getDomainSeperator(overrides?: CallOverrides): Promise<[string]>;

    getENSAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { nonce: BigNumber }>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashMetaTransaction(
      metaTx: NativeMetaTransaction.MetaTransactionStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    joinDAO(
      daoMembershipAddress: PromiseOrValue<string>,
      tierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    membershipImplementation(overrides?: CallOverrides): Promise<[string]>;

    owpWallet(overrides?: CallOverrides): Promise<[string]>;

    proxyAdmin(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setCurrencyManager(
      newCurrencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tiers(
      membershipNftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[TierConfigStructOutput[]]>;

    updateDAOMembership(
      ensName: PromiseOrValue<string>,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMembershipImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTier(
      daoMembershipAddress: PromiseOrValue<string>,
      fromTierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userCreatedDAOs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  EXTERNAL_CALLER(overrides?: CallOverrides): Promise<string>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  callExternalContract(
    contractAddress: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createNewDAOMembership(
    daoConfig: DAOInputConfigStruct,
    tierConfigs: TierConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currencyManager(overrides?: CallOverrides): Promise<string>;

  daos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber] & {
      ensname: string;
      daoType: number;
      currency: string;
      maxMembers: BigNumber;
      noOfTiers: BigNumber;
    }
  >;

  executeMetaTransaction(
    userAddress: PromiseOrValue<string>,
    functionSignature: PromiseOrValue<BytesLike>,
    sigR: PromiseOrValue<BytesLike>,
    sigS: PromiseOrValue<BytesLike>,
    sigV: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getDomainSeperator(overrides?: CallOverrides): Promise<string>;

  getENSAddress(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hashMetaTransaction(
    metaTx: NativeMetaTransaction.MetaTransactionStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  joinDAO(
    daoMembershipAddress: PromiseOrValue<string>,
    tierIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  membershipImplementation(overrides?: CallOverrides): Promise<string>;

  owpWallet(overrides?: CallOverrides): Promise<string>;

  proxyAdmin(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    callerConfirmation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    _baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setCurrencyManager(
    newCurrencyManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tiers(
    membershipNftAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<TierConfigStructOutput[]>;

  updateDAOMembership(
    ensName: PromiseOrValue<string>,
    tierConfigs: TierConfigStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMembershipImplementation(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTier(
    daoMembershipAddress: PromiseOrValue<string>,
    fromTierIndex: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userCreatedDAOs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    EXTERNAL_CALLER(overrides?: CallOverrides): Promise<string>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    callExternalContract(
      contractAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    createNewDAOMembership(
      daoConfig: DAOInputConfigStruct,
      tierConfigs: TierConfigStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    currencyManager(overrides?: CallOverrides): Promise<string>;

    daos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber] & {
        ensname: string;
        daoType: number;
        currency: string;
        maxMembers: BigNumber;
        noOfTiers: BigNumber;
      }
    >;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<string>;

    getENSAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashMetaTransaction(
      metaTx: NativeMetaTransaction.MetaTransactionStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    joinDAO(
      daoMembershipAddress: PromiseOrValue<string>,
      tierIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    membershipImplementation(overrides?: CallOverrides): Promise<string>;

    owpWallet(overrides?: CallOverrides): Promise<string>;

    proxyAdmin(overrides?: CallOverrides): Promise<string>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrencyManager(
      newCurrencyManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tiers(
      membershipNftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<TierConfigStructOutput[]>;

    updateDAOMembership(
      ensName: PromiseOrValue<string>,
      tierConfigs: TierConfigStruct[],
      overrides?: CallOverrides
    ): Promise<string>;

    updateMembershipImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTier(
      daoMembershipAddress: PromiseOrValue<string>,
      fromTierIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userCreatedDAOs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "MembershipDAONFTCreated(string,address,tuple)"(
      ensName?: PromiseOrValue<string> | null,
      nftAddress?: null,
      daoData?: null
    ): MembershipDAONFTCreatedEventFilter;
    MembershipDAONFTCreated(
      ensName?: PromiseOrValue<string> | null,
      nftAddress?: null,
      daoData?: null
    ): MembershipDAONFTCreatedEventFilter;

    "MetaTransactionExecuted(address,address,bytes,bytes32)"(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null,
      metaTXHash?: null
    ): MetaTransactionExecutedEventFilter;
    MetaTransactionExecuted(
      userAddress?: null,
      relayerAddress?: null,
      functionSignature?: null,
      metaTXHash?: null
    ): MetaTransactionExecutedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "UserJoinedDAO(address,address,uint256)"(
      user?: null,
      membershipNftAddress?: null,
      tierIndex?: null
    ): UserJoinedDAOEventFilter;
    UserJoinedDAO(
      user?: null,
      membershipNftAddress?: null,
      tierIndex?: null
    ): UserJoinedDAOEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    EXTERNAL_CALLER(overrides?: CallOverrides): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    callExternalContract(
      contractAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createNewDAOMembership(
      daoConfig: DAOInputConfigStruct,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currencyManager(overrides?: CallOverrides): Promise<BigNumber>;

    daos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getDomainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    getENSAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashMetaTransaction(
      metaTx: NativeMetaTransaction.MetaTransactionStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinDAO(
      daoMembershipAddress: PromiseOrValue<string>,
      tierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    membershipImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    owpWallet(overrides?: CallOverrides): Promise<BigNumber>;

    proxyAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setCurrencyManager(
      newCurrencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tiers(
      membershipNftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDAOMembership(
      ensName: PromiseOrValue<string>,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMembershipImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTier(
      daoMembershipAddress: PromiseOrValue<string>,
      fromTierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userCreatedDAOs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EXTERNAL_CALLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callExternalContract(
      contractAddress: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createNewDAOMembership(
      daoConfig: DAOInputConfigStruct,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currencyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeMetaTransaction(
      userAddress: PromiseOrValue<string>,
      functionSignature: PromiseOrValue<BytesLike>,
      sigR: PromiseOrValue<BytesLike>,
      sigS: PromiseOrValue<BytesLike>,
      sigV: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDomainSeperator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getENSAddress(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashMetaTransaction(
      metaTx: NativeMetaTransaction.MetaTransactionStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinDAO(
      daoMembershipAddress: PromiseOrValue<string>,
      tierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    membershipImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owpWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      callerConfirmation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      _baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setCurrencyManager(
      newCurrencyManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tiers(
      membershipNftAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDAOMembership(
      ensName: PromiseOrValue<string>,
      tierConfigs: TierConfigStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMembershipImplementation(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTier(
      daoMembershipAddress: PromiseOrValue<string>,
      fromTierIndex: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userCreatedDAOs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
